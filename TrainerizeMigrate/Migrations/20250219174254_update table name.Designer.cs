// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainerizeMigrate.Migrations;

#nullable disable

namespace TrainerizeMigrate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250219174254_update table name")]
    partial class updatetablename
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("TrainerizeMigrate.Data.BodyMeasurePoint", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("BodyWeightId")
                        .HasColumnType("TEXT");

                    b.Property<double>("bodyFatPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("bodyMassIndex")
                        .HasColumnType("REAL");

                    b.Property<double>("bodyWeight")
                        .HasColumnType("REAL");

                    b.Property<int>("caliperMode")
                        .HasColumnType("INTEGER");

                    b.Property<double>("chest")
                        .HasColumnType("REAL");

                    b.Property<string>("date")
                        .HasColumnType("TEXT");

                    b.Property<double>("leftBicep")
                        .HasColumnType("REAL");

                    b.Property<double>("leftCalf")
                        .HasColumnType("REAL");

                    b.Property<double>("leftThigh")
                        .HasColumnType("REAL");

                    b.Property<int?>("newbodystatid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("restingHeartRate")
                        .HasColumnType("INTEGER");

                    b.Property<double>("rightBicep")
                        .HasColumnType("REAL");

                    b.Property<double>("rightCalf")
                        .HasColumnType("REAL");

                    b.Property<double>("rightThigh")
                        .HasColumnType("REAL");

                    b.Property<double>("shoulders")
                        .HasColumnType("REAL");

                    b.Property<double>("waist")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.HasIndex("BodyWeightId");

                    b.ToTable("Body_Stat_Point");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.BodyWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("goal")
                        .HasColumnType("TEXT");

                    b.Property<string>("unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Body_Weight");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.CustomExcersize", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("alternateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("new_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("recordType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("videoType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("videoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Excerisize");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.PlanWorkout", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProgramPhaseid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("instruction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("new_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("ProgramPhaseid");

                    b.ToTable("TrainingPlanWorkout");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.ProgramPhase", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("durationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("endDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("instruction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("modified")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("new_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("planType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("startDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("workoutsimported")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("TrainingProgramPhase");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomExcersizeid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomExcersizeid");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.TrainingProgram", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("accessLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("durationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("endDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("startDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("subscriptionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("TrainingProgram");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.TrainingSessionStat", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TrainingSessionWorkoutdailyWorkoutId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("calories")
                        .HasColumnType("REAL");

                    b.Property<long?>("dailyExerciseID")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("distance")
                        .HasColumnType("REAL");

                    b.Property<int?>("excersizeId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("level")
                        .HasColumnType("REAL");

                    b.Property<long?>("newdailyExerciseID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("reps")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("setNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("speed")
                        .HasColumnType("REAL");

                    b.Property<double?>("time")
                        .HasColumnType("REAL");

                    b.Property<double?>("weight")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.HasIndex("TrainingSessionWorkoutdailyWorkoutId");

                    b.ToTable("TrainingSessionStat");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.TrainingSessionWorkout", b =>
                {
                    b.Property<int>("dailyWorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("newdailyWorkoutId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("numOfComments")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("rpe")
                        .HasColumnType("INTEGER");

                    b.Property<string>("workout")
                        .HasColumnType("TEXT");

                    b.Property<int?>("workoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("dailyWorkoutId");

                    b.ToTable("TrainingSessionWorkout");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.WorkoutExcersize", b =>
                {
                    b.Property<Guid>("SystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlanWorkoutid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("intervalTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("restTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("sets")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("superSetID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("target")
                        .HasColumnType("TEXT");

                    b.Property<string>("targetDetailText")
                        .HasColumnType("TEXT");

                    b.Property<double?>("targetDetailTime")
                        .HasColumnType("REAL");

                    b.Property<int?>("targetDetailType")
                        .HasColumnType("INTEGER");

                    b.HasKey("SystemId");

                    b.HasIndex("PlanWorkoutid");

                    b.ToTable("WorkoutExcersize");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.BodyMeasurePoint", b =>
                {
                    b.HasOne("TrainerizeMigrate.Data.BodyWeight", null)
                        .WithMany("points")
                        .HasForeignKey("BodyWeightId");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.PlanWorkout", b =>
                {
                    b.HasOne("TrainerizeMigrate.Data.ProgramPhase", null)
                        .WithMany("workouts")
                        .HasForeignKey("ProgramPhaseid");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.Tag", b =>
                {
                    b.HasOne("TrainerizeMigrate.Data.CustomExcersize", null)
                        .WithMany("tags")
                        .HasForeignKey("CustomExcersizeid");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.TrainingSessionStat", b =>
                {
                    b.HasOne("TrainerizeMigrate.Data.TrainingSessionWorkout", null)
                        .WithMany("stats")
                        .HasForeignKey("TrainingSessionWorkoutdailyWorkoutId");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.WorkoutExcersize", b =>
                {
                    b.HasOne("TrainerizeMigrate.Data.PlanWorkout", null)
                        .WithMany("excersizes")
                        .HasForeignKey("PlanWorkoutid");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.BodyWeight", b =>
                {
                    b.Navigation("points");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.CustomExcersize", b =>
                {
                    b.Navigation("tags");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.PlanWorkout", b =>
                {
                    b.Navigation("excersizes");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.ProgramPhase", b =>
                {
                    b.Navigation("workouts");
                });

            modelBuilder.Entity("TrainerizeMigrate.Data.TrainingSessionWorkout", b =>
                {
                    b.Navigation("stats");
                });
#pragma warning restore 612, 618
        }
    }
}
